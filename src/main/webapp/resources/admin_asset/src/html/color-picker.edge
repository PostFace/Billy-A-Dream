@layout('layouts/_default')
@set('menu', 'advanced-forms')
@set('sub', 'color-picker')

@section('breadcrumb')
<nav aria-label="breadcrumb" id="main-breadcrumb">
  <ol class="breadcrumb">
    <li class="breadcrumb-item"><a href="index.html">Home</a></li>
    <li class="breadcrumb-item"><a href="javascript:void(0)">Advanced forms</a></li>
    <li class="breadcrumb-item active" aria-current="page">Color picker</li>
  </ol>
</nav>
@endsection

@section('body')
<div class="row g-5">
  <div class="col-md-4">
    <h3 class="fw-black">Basic</h3>
    <p>Click input below to select a color, the value will be automatically filled in when the color is selected.</p>
    <div class="vstack gap-2">
      <input type="text" class="form-control" id="input-color1">
      <input type="text" class="form-control" id="input-color2">
    </div>
  </div>
  <div class="col-md-4">
    <h3 class="fw-black">Disable alpha channel</h3>
    <p>Disable alpha channel support to select non-transparent colors.</p>
    <input type="text" class="form-control" id="input-color3">
  </div>
  <div class="col-md-4">
    <h3 class="fw-black">HTML5 color input.</h3>
    <p>Replace native HTML5 Color Picker.</p>
    <input type="color" class="form-control form-control-color" id="input-color4">
  </div>
</div>
@endsection

@section('lib-css')
<link rel="stylesheet" href="{{ folder.css }}color-picker.css">
@endsection

@section('lib-js')
<script src="{{ folder.vendor }}color-picker/index.js"></script>
<script>
// Basic
const picker1 = new CP(document.querySelector('#input-color1'))
picker1.on('change', function (r, g, b, a) {
  this.source.value = this.color(r, g, b, a)
})

// Basic (rgb)
const picker2 = new CP(document.querySelector('#input-color2'), {
  color: 'RGB'
})
picker2.on('change', function (r, g, b, a) {
  this.source.value = this.color(r, g, b, a)
})

// Disable alpha channel
const picker3 = new CP(document.querySelector('#input-color3'))
picker3.on('change', function (r, g, b, a) {
  this.source.value = this.color(r, g, b, a)
})
picker3.self.classList.add('no-alpha')

// Override HTML5 color input
const picker4 = new CP(document.querySelector('#input-color4'))
picker4.on('change', function (r, g, b) {
  this.source.value = this.color(r, g, b, 1) // HTML5 color input does not support alpha channel
})
picker4.source.addEventListener('click', e => e.preventDefault()) // Prevent showing native color picker pane
picker4.self.classList.add('no-alpha')

// Update color pickerâ€™s color state on cut, input, keyup, and paste event in the source element.
;['cut', 'input', 'keyup', 'paste'].forEach(e => {
  picker1.source.addEventListener(e, function () {
    picker1.set.apply(picker1, CP.HEX(this.value)).enter()
  })
  picker2.source.addEventListener(e, function () {
    picker2.set.apply(picker2, CP.HEX(this.value)).enter()
  })
  picker3.source.addEventListener(e, function () {
    picker3.set.apply(picker3, CP.HEX(this.value)).enter()
  })
})

// Add Support for RGBA Color Value
CP.RGB = x => {
  let r, g, b, a, rgba
  if ('string' === typeof x) {
    x = x.trim()
    if (rgba = x.match(/^rgba\s*\(\s*([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\s*,\s*([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\s*,\s*([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\s*,\s*([01]|0?\.\d+)\s*\)$/i)) {
      return [+rgba[1], +rgba[2], +rgba[3], +rgba[4]]
    }
    if (rgba = x.match(/^rgb\s*\(\s*([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\s*,\s*([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\s*,\s*([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\s*\)$/i)) {
      return [+rgba[1], +rgba[2], +rgba[3], 1]
    }
    return [0, 0, 0, 1]
  }
  r = +x[0]
  g = +x[1]
  b = +x[2]
  a = +('undefined' === typeof x[3] ? 1 : x[3])
  if (1 === a) {
    return 'rgb(' + r + ', ' + g + ', ' + b + ')'
  }
  a = +a.toFixed(3)
  return 'rgba(' + r + ', ' + g + ', ' + b + ', ' + a + ')'
}
</script>
@endsection